{"version":3,"file":"component---src-pages-account-store-js-337dd752e0303fd635dc.js","mappings":"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","sources":["webpack://gatsby-starter-hello-world/./src/library/store.js","webpack://gatsby-starter-hello-world/./src/pages/account/editstore.js","webpack://gatsby-starter-hello-world/./src/components/DataGrid/index.js","webpack://gatsby-starter-hello-world/./src/components/Forms/Product.js","webpack://gatsby-starter-hello-world/./src/pages/account/manageProduct.js","webpack://gatsby-starter-hello-world/./src/pages/account/manageProduct2.js","webpack://gatsby-starter-hello-world/./node_modules/grommet-icons/es6/icons/Cluster.js","webpack://gatsby-starter-hello-world/./src/pages/account/mystore.js","webpack://gatsby-starter-hello-world/./src/pages/account/store.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { searchObject } from \"./parse\";\n\nexport const getStoreByRole = (storeRoles = [], limit = 1) => {\n  return searchObject(\"Store\", {\n    ascending: \"createdAt\",\n    role: {\n      c: \"_Role\",\n      f: \"containedIn\",\n      v: storeRoles,\n      t: \"pointer\",\n    },\n  });\n};\n","import React from \"react\";\nimport DataGrid from \"../../containers/DataGrid\";\nimport ReactHtmlParser from \"react-html-parser\";\n\nconst App = () => {\n  const configureCol = [\n    {\n      property: \"name\",\n      headerText: \"Name\",\n    },\n    {\n      property: \"description\",\n      headerText: \"Description\",\n      type: \"Textarea\",\n      render: (data) => <> {ReactHtmlParser(data.description)} </>,\n    },\n  ];\n  return (\n    <>\n      <DataGrid\n        objectClass=\"Store\"\n        columns={configureCol}\n        query={(q) => q}\n        fetchData={{\n          action: \"findStore\",\n        }}\n      />\n    </>\n  );\n};\nexport default App;\n","import React from \"react\";\nimport { DataTable, Text } from \"grommet\";\nimport { Close, Configure } from \"grommet-icons\";\nconst Component = ({ data, onConfigure, onDelete }) => {\n  return (\n    <>\n      <DataTable\n        columns={[\n          {\n            property: \"name\",\n            header: <Text>Name</Text>,\n            primary: true,\n          },\n          {\n            property: \"description\",\n            header: <Text>Description</Text>,\n          },\n          {\n            property: \"startBid\",\n            header: <Text>Start Bid</Text>,\n          },\n          {\n            property: \"instantClosePrice\",\n            header: <Text>Instant Close Price</Text>,\n          },\n          {\n            property: \"Status\",\n            header: <Text>Status</Text>,\n          },\n          {\n            property: \"available\",\n            header: <Text>Display</Text>,\n          },\n          {\n            property: \"\",\n            header: <Text>Action</Text>,\n            render: (datum) => (\n              <>\n                <Configure\n                  onClick={() => onConfigure && onConfigure(datum)}\n                  style={{ cursor: \"pointer\" }}\n                />\n                <Close\n                  onClick={() => onDelete && onDelete(datum)}\n                  style={{ cursor: \"pointer\" }}\n                />\n              </>\n            ),\n          },\n        ]}\n        data={data}\n      />\n    </>\n  );\n};\n\nexport default Component;\n","import React, { useState, useCallback } from \"react\";\nimport { Box, Button, TextInput, Heading, Image, CheckBox } from \"grommet\";\nimport { useDropzone } from \"react-dropzone\";\nimport Parse from \"../../library/parse\";\nconst Component = ({\n  formModal,\n  onModal,\n  mode = \"create\",\n  onDelete,\n  onUpdate,\n}) => {\n  const [modal, setModal] = useState(formModal);\n  const [checked, setChecked] = React.useState(true);\n  const [, setProductImage] = useState(null);\n\n  const textInputProps = (key, modalObject) => ({\n    value: modalObject[key],\n    onChange: (event) =>\n      setModal({\n        ...modalObject,\n        [key]: event.target.value,\n      }),\n  });\n\n  const onDrop = useCallback(\n    (acceptedFiles) => {\n      const uploadFile = (file) => {\n        var parseFile = new Parse.File(file.name, file);\n        parseFile.save().then(function (parseFile) {\n          setProductImage(parseFile.url());\n          setModal({\n            ...modal,\n            photo: parseFile,\n            available: !!checked,\n          });\n        });\n      };\n      const file = acceptedFiles && acceptedFiles[0];\n      uploadFile(file);\n    },\n    [modal, checked]\n  );\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  return (\n    <Box>\n      {mode === \"delete\" && (\n        <>\n          <Heading level={2}>Are you sure?</Heading>\n          {modal && modal.photo && modal.photo.url && (\n            <Box height=\"small\" width=\"small\">\n              <Image fit=\"cover\" src={modal.photo.url} />\n            </Box>\n          )}\n          <Button\n            label=\"delete\"\n            onClick={() => {\n              onModal &&\n                onModal(mode, {\n                  ...modal,\n                  available: !!checked,\n                });\n            }}\n          />\n        </>\n      )}\n      {[\"create\", \"update\"].includes(mode) && (\n        <>\n          <Heading level={3}>Upload Product</Heading>\n          <TextInput\n            placeholder=\"Product Name\"\n            {...textInputProps(\"name\", modal)}\n          />\n          <Box direction=\"row\">\n            <div {...getRootProps()}>\n              <input {...getInputProps()} />\n              {modal && modal.photo && modal.photo.url && (\n                <Box height=\"small\" width=\"small\">\n                  <Image fit=\"cover\" src={modal.photo.url} />\n                </Box>\n              )}\n              {isDragActive ? (\n                <p>Drop the files here ...</p>\n              ) : (\n                <p>Drag 'n' drop some files here, or click to select files</p>\n              )}\n            </div>\n          </Box>\n          <TextInput\n            {...textInputProps(\"startBid\", modal)}\n            placeholder=\"Start Bid\"\n          />\n          <TextInput\n            {...textInputProps(\"instantClosePrice\", modal)}\n            placeholder=\"Instant Close\"\n          />\n          <CheckBox\n            checked={checked}\n            label=\"Display On Store\"\n            onChange={(event) => {\n              setChecked(event.target.checked);\n            }}\n          />\n          <Button\n            label={mode}\n            onClick={() =>\n              onModal &&\n              onModal(mode, {\n                ...modal,\n                available: !!checked,\n              })\n            }\n          />\n        </>\n      )}\n    </Box>\n  );\n};\n\nexport default Component;\n","import React, { useEffect, useState } from \"react\";\nimport { Box, TextInput, Anchor } from \"grommet\";\nimport ProductGrid from \"../../components/DataGrid\";\nimport ProductForm from \"../../components/Forms/Product\";\nimport Modal from \"../../components/Modal\";\nimport {\n  findMyStore,\n  findProduct,\n  deleteOneProduct,\n  updateOneProduct,\n  createOneProduct,\n} from \"../../library/parse\";\nimport { cloneJSONKey } from \"../../helpers\";\nimport Parse from \"../../library/parse\";\n\nconst App = ({ id }) => {\n  const Store = Parse && Parse.Object && Parse.Object.extend(\"Store\");\n  const [formModal, setformModal] = useState({});\n  const [activeStore] = useState(Store && new Store());\n  const [editModal, setEditModal] = useState({});\n  const [showModal, setShowModal] = useState(false);\n  const [store, setStore] = useState(null);\n  const [myProducts, setMyProducts] = useState([]);\n  const [productFormMode, setProductFormMode] = useState(\"create\");\n\n  useEffect(() => {\n    const run = async () => {\n      const stores = await findMyStore();\n      setStore(stores.find((e) => e.id === id));\n    };\n    run();\n  }, [id]);\n\n  useEffect(() => {\n    if (store) {\n      setEditModal({\n        name: store.get(\"name\"),\n      });\n      const loadProduct = async () => {\n        setMyProducts(await findProduct(store));\n      };\n      loadProduct();\n    }\n  }, [store]);\n  return (\n    <>\n      <Box fill={true} justify=\"center\" align=\"center\" alignContent=\"center\">\n        {\n          <>\n            <Box fill={true} gap=\"small\" direction=\"row\">\n              <TextInput\n                plain={false}\n                placeholder=\"choose a store name\"\n                value={editModal.name}\n                onChange={(event) => {\n                  setEditModal({\n                    ...editModal,\n                    objectId: activeStore && activeStore.id,\n                    name: event.target.value,\n                  });\n                }}\n              />\n              <Anchor onClick={() => setShowModal(true)}>\n                Change Store Name\n              </Anchor>\n              <Anchor\n                onClick={() => {\n                  setProductFormMode(\"create\");\n                  setformModal({});\n                  setShowModal(true);\n                }}\n              >\n                Add Product\n              </Anchor>\n            </Box>\n            <Box fill={true}>\n              <ProductGrid\n                data={myProducts ? myProducts.map((e) => e.toJSON()) : []}\n                onConfigure={(modal) => {\n                  setProductFormMode(\"update\");\n                  setformModal(modal);\n                  setShowModal(true);\n                }}\n                onDelete={(modal) => {\n                  setProductFormMode(\"delete\");\n                  setformModal(modal);\n                  setShowModal(true);\n                }}\n              />\n            </Box>\n          </>\n        }\n      </Box>\n      {showModal && (\n        <Modal onClose={() => setShowModal(false)}>\n          <ProductForm\n            mode={productFormMode}\n            formModal={formModal}\n            onModal={async (action, modal) => {\n              const keyToSend = [\n                \"name\",\n                \"photo\",\n                \"startBid\",\n                \"instantClosePrice\",\n                \"objectId\",\n                \"available\",\n              ];\n              const storeId = store.id;\n              modal = cloneJSONKey(modal, keyToSend);\n\n              if (action === \"create\") {\n                await createOneProduct(modal, store.id);\n              }\n              if (action === \"update\") {\n                await updateOneProduct({\n                  ...modal,\n                  productId: modal.objectId,\n                  storeId,\n                });\n              }\n              if (action === \"delete\") {\n                await deleteOneProduct({\n                  productId: modal.objectId,\n                  storeId,\n                });\n              }\n              setTimeout(\n                () =>\n                  findProduct(store).then((r) => {\n                    setMyProducts(r);\n                    setShowModal(false);\n                  }),\n                1000\n              );\n            }}\n            onClose={() => setShowModal(false)}\n          />\n        </Modal>\n      )}\n    </>\n  );\n};\nexport default App;\n","import React from \"react\";\nimport DataGrid from \"../../containers/DataGrid\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport { Anchor } from \"grommet\";\nimport { format, parseISO } from \"date-fns\";\n\nconst App = ({ id }) => {\n  const configureCol = [\n    {\n      property: \"objectId\",\n      headerText: \"\",\n      primaryKey: true,\n      render: (data) => <> </>,\n    },\n    {\n      property: \"name\",\n      headerText: \"Name\",\n    },\n    {\n      property: \"Description\",\n      headerText: \"Info\",\n      type: \"Textarea\",\n      render: (data) => <> {ReactHtmlParser(data.description)} </>,\n    },\n    {\n      property: \"bidEndAt\",\n      headerText: \"BidEnd\",\n      type: \"DateTimePicker\",\n      render: (data) => (\n        <>\n          {\" \"}\n          {data.bidEndAt\n            ? format(parseISO(data.bidEndAt.iso), \"yyyy MMM dd HH:mm:s\")\n            : \"Not Set\"}{\" \"}\n        </>\n      ),\n    },\n    {\n      property: \"available\",\n      headerText: \"Show\",\n      type: \"CheckBox\",\n      render: (data) => <> {data.available ? \"Yes\" : \"No\"} </>,\n    },\n    {\n      property: \"startBid\",\n      headerText: \"startBid\",\n      render: (data) => <> {data.startBid} </>,\n    },\n    {\n      headerText: \"Image\",\n      render: (data) => (\n        <>\n          {\" \"}\n          {data.photo ? (\n            <Anchor href={data.photo.url}> View </Anchor>\n          ) : (\n            \"Empty\"\n          )}{\" \"}\n        </>\n      ),\n    },\n  ];\n  return (\n    <>\n      <DataGrid\n        suffix=\"\"\n        objectClass=\"Product\"\n        columns={configureCol}\n        query={(q) => q}\n        fetchData={{\n          action: \"searchProduct\",\n          params: {\n            query: {\n              storeId: {\n                f: \"equalTo\",\n                v: id,\n              },\n            },\n          },\n        }}\n      />\n    </>\n  );\n};\nexport default App;\n","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { StyledIcon } from '../StyledIcon';\nexport var Cluster = function Cluster(props) {\n  return /*#__PURE__*/React.createElement(StyledIcon, _extends({\n    viewBox: \"0 0 24 24\",\n    a11yTitle: \"Cluster\"\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"none\",\n    stroke: \"#000\",\n    strokeWidth: \"2\",\n    d: \"M8,9 L16,9 L16,1 L8,1 L8,9 Z M1,23 L9,23 L9,15 L1,15 L1,23 Z M15,23 L23,23 L23,15 L15,15 L15,23 Z M5,15 L8,9 L5,15 Z M10,19 L14,19 L10,19 Z M16,9 L19,15 L16,9 Z\"\n  }));\n};","import React, { useState, useEffect } from \"react\";\nimport DataGrid from \"../../containers/DataGrid\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport { Cluster } from \"grommet-icons\";\nimport Parse from \"../../library/parse\";\nimport { getStoreByRole } from \"../../library/store\";\n\nimport UserContext from \"../../context/UserContext\";\nimport { navigate } from \"gatsby\";\nconst configureCol = [\n  {\n    property: \"name\",\n    headerText: \"Name\",\n  },\n  {\n    property: \"description\",\n    headerText: \"Info\",\n    type: \"Textarea\",\n    render: (data) => <> {ReactHtmlParser(data.description)} </>,\n  },\n  {\n    property: \"whatsapp\",\n    headerText: \"Whatsapp\",\n    render: (data) => <> {ReactHtmlParser(data.whatsapp)} </>,\n  },\n  {\n    property: \"objectId\",\n    headerText: \"Product\",\n    render: (data) => (\n      <>\n        <Cluster\n          onClick={() => {\n            navigate(`/account/store/manageproduct2/${data.objectId}`);\n          }}\n        />\n      </>\n    ),\n  },\n];\n\nconst App = () => {\n  const _userContext = React.useContext(UserContext);\n  const [datasource, setDatasource] = useState([]);\n\n  useEffect(() => {\n    const storeRoles =\n      (_userContext &&\n        _userContext.roleObjects\n          .filter((ro) => ro.get(\"name\").includes(\"Store-\"))\n          .map((ro) => ro.id)) ||\n      [];\n    if (storeRoles && storeRoles.length) {\n      getStoreByRole(storeRoles, 999).then((ds) => {\n        setDatasource(ds);\n      });\n    }\n  }, [_userContext]);\n  return (\n    <>\n      <DataGrid\n        width=\"100%\"\n        objectClass=\"Store\"\n        columns={configureCol}\n        query={(q) => q}\n        datasource={datasource}\n        afterAction={() => _userContext.refresh()}\n      />\n    </>\n  );\n};\nexport default App;\n","import React from \"react\";\nimport { Router } from \"@reach/router\";\nimport MyStore from \"./mystore\";\nimport EditStore from \"./editstore\";\nimport ManageStoreProduct from \"./manageProduct\";\nimport ManageStoreProduct2 from \"./manageProduct2\";\nimport { Box } from \"grommet\";\n\nconst App = () => {\n  return (\n    <Box fill={true}>\n      <Router basepath=\"/account/store\">\n        <EditStore path=\"/editstore/:id\" />\n        <MyStore path=\"/\" />\n        <ManageStoreProduct path=\"/manageproduct/:id\" />\n        <ManageStoreProduct2 path=\"/manageproduct2/:id\" />\n      </Router>\n    </Box>\n  );\n};\nexport default App;\n"],"names":["getStoreByRole","storeRoles","limit","searchObject","ascending","role","c","f","v","t","configureCol","property","headerText","type","render","data","ReactHtmlParser","description","objectClass","columns","query","q","fetchData","action","onConfigure","onDelete","DataTable","header","Text","primary","datum","Configure","onClick","style","cursor","Close","formModal","onModal","mode","onUpdate","useState","modal","setModal","React","checked","setChecked","setProductImage","textInputProps","key","modalObject","value","onChange","event","target","onDrop","useCallback","acceptedFiles","file","Parse","name","save","then","parseFile","url","photo","available","uploadFile","useDropzone","getRootProps","getInputProps","isDragActive","Box","Heading","level","height","width","Image","fit","src","Button","label","includes","TextInput","placeholder","direction","CheckBox","id","Store","setformModal","activeStore","editModal","setEditModal","showModal","setShowModal","store","setStore","myProducts","setMyProducts","productFormMode","setProductFormMode","useEffect","findMyStore","stores","find","e","run","get","findProduct","loadProduct","fill","justify","align","alignContent","gap","plain","objectId","Anchor","map","toJSON","Modal","onClose","Product","keyToSend","storeId","cloneJSONKey","createOneProduct","updateOneProduct","productId","deleteOneProduct","setTimeout","r","primaryKey","bidEndAt","format","parseISO","iso","startBid","href","suffix","params","_extends","Object","assign","i","arguments","length","source","prototype","hasOwnProperty","call","apply","this","Cluster","props","StyledIcon","viewBox","a11yTitle","stroke","strokeWidth","d","whatsapp","navigate","_userContext","UserContext","datasource","setDatasource","roleObjects","filter","ro","ds","DataGrid","afterAction","refresh","Router","basepath","path"],"sourceRoot":""}