{"version":3,"sources":["webpack:///./src/containers/Chat/ChatroomList.js","webpack:///./src/containers/Chat/index.js","webpack:///./src/pages/chat.js"],"names":["Home","initialActiveId","senderRoleName","useState","chatroom","setChatroom","activeRoom","profileLookup","setProfileLookup","useEffect","a","findChatroomForUser","chatrooms","roleNames","reduce","p","n","concat","get","split","getRolePublicProfile","publicRoles","clookup","c","names","filter","e","id","map","found","find","pr","role","rolePublicProfile","join","loadChatroom","Box","fill","direction","List","width","children","item","recipientName","recipientRoleName","pad","background","objectId","Anchor","href","primaryKey","data","recipentProfile","setRecipentProfile","then","length","Grid","gap","areas","name","start","end","columns","rows","gridArea","ChatroomList","onActive","height","Chatroom","chatroomName","publicRoom","basepath","Chat","path"],"mappings":"6PA2EeA,EAvEF,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,gBAAiBC,EAAqB,EAArBA,eAAqB,EACpBC,mBAAS,IAAlCC,EAD6C,KACnCC,EADmC,KAE7CC,EAAcH,mBAASF,GAAmB,GAFG,KAGVE,mBAAS,IAA5CI,EAH6C,KAG9BC,EAH8B,KAsCpD,OAjCAC,qBAAU,YACU,uCAAG,kCAAAC,EAAA,sEACKC,YAAoBT,GADzB,cACbU,EADa,OAEnBP,EAAYO,GAGNC,EAAYD,EAAUE,QAAO,SAACC,EAAGC,GACrC,OAAOD,EAAEE,OAAOD,EAAEE,IAAI,cAAcC,MAAM,QACzC,IAPgB,SAQOC,YAAqBP,GAR5B,OAQbQ,EARa,OASbC,EAAUV,EAAUE,QAAO,SAACC,EAAGQ,GACnC,IAAMC,EAAQD,EACXL,IAAI,cACJC,MAAM,KACNM,QAAO,SAACC,GAAD,OAAOA,IAAMxB,KAYvB,OAXAa,EAAEQ,EAAEI,IAAMH,EACPI,KAAI,SAACZ,GACJ,IAAMa,EAAQR,EAAYS,MAAK,SAACC,GAAD,OAAQA,EAAGC,MAAQD,EAAGC,KAAKd,IAAI,UAAYF,KAC1E,OAAGa,EACMA,EAAMI,kBAAkBf,IAAI,QAE5B,MAIVgB,KAAK,KACDnB,IACN,IACHP,EAAiBc,GA3BE,4CAAH,qDA8BlBa,KACC,CAACjC,IAEF,oCACE,kBAACkC,EAAA,EAAD,CAAKC,MAAM,EAAMC,UAAU,OACzB,kBAACC,EAAA,EAAD,CACEC,MAAM,OACNC,SAAU,SAACC,GACT,IAAMC,EAAgBpC,EAAcmC,EAAKf,IACnCiB,EAAoBF,EACvBxB,IAAI,cACJC,MAAM,KACNM,QAAO,SAACC,GAAD,OAAOA,IAAMxB,KACvB,OACE,kBAACkC,EAAA,EAAD,CACES,IAAI,QACJC,WAAYxC,IAAeoC,EAAKK,SAAW,UAAY,SAEvD,kBAACC,EAAA,EAAD,CACEC,KAAI,WAAa/C,EAAb,MAAiC0C,GAEpCD,KAKTE,IAAI,IACJK,WAAW,OACXC,KAAM/C,OCpBDJ,EA3CF,SAAC,GAA2C,IAAzCE,EAAwC,EAAxCA,eAAgB0C,EAAwB,EAAxBA,kBAAwB,EACRzC,mBAAS,MAAhDiD,EAD+C,KAC9BC,EAD8B,KAQtD,OALA5C,qBAAU,WACRW,YAAqB,CAACwB,IAAoBU,MAAK,SAAC5B,GAC9CA,GAAKA,EAAE6B,QAAUF,EAAmB3B,EAAE,GAAGO,wBAE1C,CAACW,IAEF,oCACE,kBAACY,EAAA,EAAD,CACEC,IAAI,QACJZ,IAAI,QACJR,MAAI,EACJqB,MAAO,CACL,CAAEC,KAAM,OAAQC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,IACxC,CAAEF,KAAM,OAAQC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,KAE1CC,QAAS,CAAC,MAAO,OACjBC,KAAM,CAAC,SAEP,kBAAC3B,EAAA,EAAD,CAAKC,MAAM,EAAM2B,SAAS,OAAO1B,UAAU,OACzC,kBAAC2B,EAAD,CACE/D,eAAgBA,EAChB0C,kBAAmBA,EACnBsB,SAAU,gBAGd,kBAAC9B,EAAA,EAAD,CAAK4B,SAAS,OAAOnB,IAAI,SAASsB,OAAO,SACtCjE,GACC,kBAACkE,EAAA,EAAD,CACEC,aAAcjB,GAAmBA,EAAgBlC,IAAI,QACrDhB,eAAgBA,EAChB0C,kBAAmBA,EACnB0B,YAAY,QCzBXtE,UAVF,WACX,OACE,oCACE,kBAAC,SAAD,CAAQuE,SAAS,SACf,kBAACC,EAAD,CAAMC,KAAI","file":"component---src-pages-chat-js-fd926d0fe6b30b622d38.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Anchor, List, Box } from \"grommet\";\nimport { findChatroomForUser, getRolePublicProfile } from \"../../library/parse\";\n\nconst Home = ({ initialActiveId, senderRoleName }) => {\n  const [chatroom, setChatroom] = useState([]);\n  const [activeRoom] = useState(initialActiveId || 0);\n  const [profileLookup, setProfileLookup] = useState({});\n\n  useEffect(() => {\n    const loadChatroom = async () => {\n      const chatrooms = await findChatroomForUser(senderRoleName);\n      setChatroom(chatrooms);\n\n\n      const roleNames = chatrooms.reduce((p, n) => {\n        return p.concat(n.get(\"uniqueName\").split(\"_\"));\n      }, []);\n      const publicRoles = await getRolePublicProfile(roleNames);\n      const clookup = chatrooms.reduce((p, c) => {\n        const names = c\n          .get(\"uniqueName\")\n          .split(\"_\")\n          .filter((e) => e !== senderRoleName);\n        p[c.id] = names\n          .map((n) => {\n            const found = publicRoles.find((pr) => pr.role && pr.role.get(\"name\") === n);\n            if(found) {\n              return found.rolePublicProfile.get(\"name\");\n            } else {\n              return \"\"\n            }\n            \n          })\n          .join(\" \");\n        return p;\n      }, {});\n      setProfileLookup(clookup);\n    };\n\n    loadChatroom();\n  }, [senderRoleName]);\n  return (\n    <>\n      <Box fill={true} direction=\"row\">\n        <List\n          width=\"100%\"\n          children={(item) => {\n            const recipientName = profileLookup[item.id];\n            const recipientRoleName = item\n              .get(\"uniqueName\")\n              .split(\"_\")\n              .filter((e) => e !== senderRoleName);\n            return (\n              <Box\n                pad=\"small\"\n                background={activeRoom === item.objectId ? \"light-2\" : \"white\"}\n              >\n                <Anchor\n                  href={`/chat/r/${senderRoleName}/c/${recipientRoleName}`}\n                >\n                  {recipientName}\n                </Anchor>\n              </Box>\n            );\n          }}\n          pad=\"0\"\n          primaryKey=\"name\"\n          data={chatroom}\n        />\n      </Box>\n    </>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport { Grid, Box } from \"grommet\";\nimport Chatroom from \"../Chatroom\";\nimport { getRolePublicProfile } from \"../../library/parse\";\nimport ChatroomList from \"./ChatroomList\";\nconst Home = ({ senderRoleName, recipientRoleName }) => {\n  const [recipentProfile, setRecipentProfile] = useState(null);\n\n  useEffect(() => {\n    getRolePublicProfile([recipientRoleName]).then((e) => {\n      e && e.length && setRecipentProfile(e[0].rolePublicProfile);\n    });\n  }, [recipientRoleName]);\n  return (\n    <>\n      <Grid\n        gap=\"small\"\n        pad=\"small\"\n        fill\n        areas={[\n          { name: \"chat\", start: [0, 0], end: [0, 0] },\n          { name: \"room\", start: [1, 0], end: [1, 0] },\n        ]}\n        columns={[\"3/4\", \"1/4\"]}\n        rows={[\"auto\"]}\n      >\n        <Box fill={true} gridArea=\"room\" direction=\"row\">\n          <ChatroomList\n            senderRoleName={senderRoleName}\n            recipientRoleName={recipientRoleName}\n            onActive={() => {}}\n          />\n        </Box>\n        <Box gridArea=\"chat\" pad=\"medium\" height=\"405px\">\n          {senderRoleName && (\n            <Chatroom\n              chatroomName={recipentProfile && recipentProfile.get(\"name\")}\n              senderRoleName={senderRoleName}\n              recipientRoleName={recipientRoleName}\n              publicRoom={false}\n            />\n          )}\n        </Box>\n      </Grid>\n    </>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { Router } from \"@reach/router\";\nimport Chat from \"../containers/Chat\";\n\nconst Home = () => {\n  return (\n    <>\n      <Router basepath=\"/chat\">\n        <Chat path={`/r/:senderRoleName/c/:recipientRoleName`} />\n      </Router>\n    </>\n  );\n};\n\nexport default Home;\n"],"sourceRoot":""}