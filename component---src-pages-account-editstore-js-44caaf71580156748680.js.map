{"version":3,"sources":["webpack:///./src/containers/DataGrid/index.js","webpack:///./src/pages/account/editstore.js"],"names":["Home","datasource","hideCRUDForm","suffix","objectClass","columns","fetchData","useState","activeModel","setActiveModel","showFormModal","setShowFormModal","mode","setMode","stores","setStores","dtColumn","setDtColumn","loadData","useCallback","a","callCloud","action","params","useEffect","newDtColumn","map","e","property","header","headerText","primary","render","push","onClick","datum","style","cursor","length","data","toJSON","onClose","formConfig","config","model","crud","setTimeout","App","configureCol","type","ReactHtmlParser","description","query","q"],"mappings":"8QAuGeA,IAhGF,SAAC,GAAgF,IAA9EC,EAA6E,EAA7EA,WAAYC,EAAiE,EAAjEA,aAAiE,IAAnDC,cAAmD,MAA1C,GAA0C,EAAtCC,EAAsC,EAAtCA,YAAaC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UAAgB,EAErDC,mBAAS,IAAxCC,EAFoF,KAEvEC,EAFuE,OAGjDF,oBAAS,GAA5CG,EAHoF,KAGrEC,EAHqE,OAInEJ,mBAAS,QAA1BK,EAJoF,KAI9EC,EAJ8E,OAK/DN,mBAASN,GAAc,IAA5Ca,EALoF,KAK5EC,EAL4E,OAM3DR,mBAAS,IAAlCS,EANoF,KAM1EC,EAN0E,KAOrFC,EAAWC,sBAAW,sBAAC,sBAAAC,EAAA,8DAEzBd,GAFyB,iCAGzBS,EAHyB,SAGTM,YAAUf,EAAUgB,OAAQhB,EAAUiB,QAH7B,wHAK1B,CAACjB,IAyDJ,OAvDAkB,qBAAU,WACLvB,EACDc,EAAUd,GAEViB,MAED,CAACA,EAAUjB,IAEduB,qBAAU,WACR,IAAMC,EAAcpB,EAAQqB,KAAI,SAACC,GAAD,MAAQ,CACtCC,SAAUD,EAAEC,SACZC,OAAQ,kBAAC,IAAD,SAAQF,EAAEG,YAClBC,QAASJ,EAAEI,QACXC,OAAQL,EAAEK,YAGX9B,GAAgBuB,EAAYQ,KAC3B,CACEL,SAAU,WACVC,OACE,kBAAC,IAAD,CACEK,QAAS,WACPzB,EAAe,IACfI,EAAQ,UACRF,GAAiB,KAJrB,OAOOP,GAGT4B,OAAQ,SAACG,GAAD,OACN,oCACE,kBAAC,IAAD,CACED,QAAS,WACPzB,EAAe0B,GACftB,EAAQ,UACRF,GAAiB,IAEnByB,MAAO,CAAEC,OAAQ,aAEnB,kBAAC,IAAD,CACEH,QAAS,WACPzB,EAAe0B,GACftB,EAAQ,UACRF,GAAiB,IAEnByB,MAAO,CAAEC,OAAQ,iBAM3BpB,EAAYQ,KACX,CAACvB,EAAcG,IAGhB,kBAAC,IAAD,KACGS,EAAOwB,OADV,IACmBlC,EACjB,kBAAC,IAAD,CACEC,QAASW,EACTuB,KAAMzB,EAAOY,KAAI,SAACC,GAAD,OAAOA,EAAEa,cAE3B9B,GACC,kBAAC,IAAD,CAAO+B,QAAS,kBAAM9B,GAAiB,KACrC,kBAAC,IAAD,CACE+B,WAAY,CAAEC,OAAQtC,GACtBO,KAAMA,EACNgC,MAAOpC,EACP0B,QAAS,SAACtB,EAAMgC,GACdC,YAAKzC,EAAawC,EAAOhC,EAAMT,GAC/B2C,YAAW,WACT5B,IACAP,GAAiB,KAChB,Y,kCC9FjB,iEA8BeoC,UA1BH,WACV,IAAMC,EAAe,CACnB,CACEpB,SAAU,OACVE,WAAY,QAEd,CACEF,SAAU,cACVE,WAAY,cACZmB,KAAM,WACNjB,OAAQ,SAACO,GAAD,OAAU,wCAAIW,IAAgBX,EAAKY,aAAzB,QAGtB,OACE,oCACE,kBAAC,IAAD,CACE/C,YAAY,QACZC,QAAS2C,EACTI,MAAO,SAACC,GAAD,OAAOA,GACd/C,UAAW,CACTgB,OAAQ","file":"component---src-pages-account-editstore-js-44caaf71580156748680.js","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { Close, Configure } from \"grommet-icons\";\nimport Modal from \"../../components/Modal\";\nimport { Box, Anchor, DataTable, Text } from \"grommet\";\nimport { callCloud, crud } from \"../../library/parse\";\nimport CRUDForm from '../CRUDForm'\n\nconst Home = ({ datasource, hideCRUDForm, suffix = \"\", objectClass, columns, fetchData }) => {\n  \n  const [activeModel, setActiveModel] = useState({});\n  const [showFormModal, setShowFormModal] = useState(false);\n  const [mode, setMode] = useState(\"read\");\n  const [stores, setStores] = useState(datasource || []);\n  const [dtColumn, setDtColumn] = useState([]);\n  const loadData = useCallback(async () => {\n    return (\n      fetchData &&\n      setStores(await callCloud(fetchData.action, fetchData.params))\n    );\n  }, [fetchData]);\n\n  useEffect(() => {\n    if(datasource) {\n      setStores(datasource)\n    } else {\n      loadData()\n    }\n  }, [loadData, datasource]);\n\n  useEffect(() => {\n    const newDtColumn = columns.map((e) => ({\n      property: e.property,\n      header: <Text> {e.headerText}</Text>,\n      primary: e.primary,\n      render: e.render,\n    }));\n\n    !hideCRUDForm && newDtColumn.push(\n      {\n        property: \"objectId\",\n        header: (\n          <Anchor\n            onClick={() => {\n              setActiveModel({});\n              setMode(\"create\");\n              setShowFormModal(true);\n            }}\n          >\n            Add {objectClass}\n          </Anchor>\n        ),\n        render: (datum) => (\n          <>\n            <Configure\n              onClick={() => {\n                setActiveModel(datum);\n                setMode(\"update\");\n                setShowFormModal(true);\n              }}\n              style={{ cursor: \"pointer\" }}\n            />\n            <Close\n              onClick={() => {\n                setActiveModel(datum);\n                setMode(\"delete\");\n                setShowFormModal(true);\n              }}\n              style={{ cursor: \"pointer\" }}\n            />\n          </>\n        ),\n      }\n    )\n    setDtColumn(newDtColumn)\n  }, [hideCRUDForm, columns])\n\n  return (\n    <Box>\n      {stores.length} {objectClass}\n      <DataTable\n        columns={dtColumn}\n        data={stores.map((e) => e.toJSON())}\n      />\n      {showFormModal && (\n        <Modal onClose={() => setShowFormModal(false)}>\n          <CRUDForm \n            formConfig={{ config: columns }}\n            mode={mode}\n            model={activeModel}\n            onClick={(mode, model) => {\n              crud(objectClass, model, mode, suffix);\n              setTimeout(() => {\n                loadData();\n                setShowFormModal(false);\n              }, 1000);\n            }}\n            />\n        </Modal>\n      )}\n    </Box>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport DataGrid from \"../../containers/DataGrid\";\nimport ReactHtmlParser from \"react-html-parser\";\n\nconst App = () => {\n  const configureCol = [\n    {\n      property: \"name\",\n      headerText: \"Name\",\n    },\n    {\n      property: \"description\",\n      headerText: \"Description\",\n      type: \"Textarea\",\n      render: (data) => <> {ReactHtmlParser(data.description)} </>,\n    },\n  ];\n  return (\n    <>\n      <DataGrid\n        objectClass=\"Store\"\n        columns={configureCol}\n        query={(q) => q}\n        fetchData={{\n          action: \"findStore\",\n        }}\n      />\n    </>\n  );\n};\nexport default App;\n"],"sourceRoot":""}