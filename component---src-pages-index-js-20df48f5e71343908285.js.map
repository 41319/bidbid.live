{"version":3,"file":"component---src-pages-index-js-20df48f5e71343908285.js","mappings":"sOAkHA,UAnFa,WACX,OAAwCA,EAAAA,EAAAA,UAAS,IAA1CC,EAAP,KAAqBC,EAArB,KACA,GAAmCF,EAAAA,EAAAA,UAAS,IAArCG,EAAP,KAAmBC,EAAnB,KACA,GAAoCJ,EAAAA,EAAAA,UAAS,IAA1BK,GAAnB,WACA,GAAkCL,EAAAA,EAAAA,UAAS,IAA3C,UAkDA,OAjDAM,EAAAA,EAAAA,YAAU,YAEM,mCAAG,8FAEFC,EAAAA,GAAAA,MAAAA,IAAgB,WAAY,CACvCC,OAAQ,GACRC,SAAU,QAJG,mFAAH,qDAOdC,GACCC,KAAKT,KACL,KAEHI,EAAAA,EAAAA,YAAU,WACR,IAAMM,EAAcX,EAAaY,OAASZ,EAAa,GAAGa,KAAKC,KAAI,SAAAC,GAAC,OAAIA,EAAER,UAAU,GACpFH,EAAcO,GAEd,IAAMK,EAAchB,EAAaiB,QAAO,SAACC,EAAOC,GAc9C,OAbAA,EAAIN,KAAKO,SAAQ,SAAAC,GACM,IAAD,EAKb,EALJH,EAAMG,EAAEd,QACTW,EAAMG,EAAEd,QAAR,iBACKW,EAAMG,EAAEd,UADb,MAEGY,EAAIX,UAAWa,EAAEC,MAFpB,IAKAJ,EAAMG,EAAEd,UAAR,MACGY,EAAIX,UAAWa,EAAEC,MADpB,MAMGJ,IACN,IACGK,EAASC,OAAOC,KAAKT,GAC1BF,KAAI,SAAAY,GAAC,sBACJnB,OAAQmB,GACLV,EAAYU,OAEhBC,QAAO,SAAAZ,GAAC,OAAKA,EAAEa,SAAWb,EAAEc,WAC5Bf,KAAI,SAAAC,GAAC,wBACDA,EADC,CAEJe,YAzDiBC,EAyDShB,EAAEa,QAzDRI,EAyDiBjB,EAAEc,QAxDxCE,IAAMC,EACA,EAEND,EAAIC,GACGA,EAAID,GAAKA,EAAI,KAEbA,EAAIC,GAAKA,EAAI,OAPH,IAACD,EAAGC,KA2DrBL,QAAO,SAAAZ,GAAC,OAAqB,IAAjBA,EAAEe,YAAoBf,EAAER,OAAO0B,SAAS,WACpDC,KA3Ee,SAACC,EAAKC,QAAmB,IAAnBA,IAAAA,EAAQ,QAChC,IAAMC,EAAsB,QAAVD,EAAkB,GAAK,EACzC,OAAO,SAACL,EAAGC,GACP,IAAMM,EAAuB,iBAAXP,EAAEI,GAAqBJ,EAAEI,GAAKI,cAAgBR,EAAEI,GAC5DK,EAAuB,iBAAXR,EAAEG,GAAqBH,EAAEG,GAAKI,cAAgBP,EAAEG,GAClE,OAAKG,EAAIE,GACe,EAAbH,EACAC,EAAIE,EACQ,EAAZH,EAEA,GAiEPI,CAAY,eAElBtC,EAAaoB,KACZ,CAACvB,IAEG,gCAEH,2BAEE,gBAAC,IAAD,CACAa,KAAMX,IAEL,SAAAwC,GACC,OAAO,gBAAC,IAAD,CAAKC,UAAU,OACpB,gBAAC,IAAD,CAAKC,KAAM,CAAEC,KAAM,EAAGC,OAAQ,GAAIC,MAAM,KACtCL,EAAMnC,QAER,gBAAC,IAAD,CAAKqC,KAAM,CAAEC,KAAM,EAAGC,OAAQ,GAAIC,MAAM,KACtCL,EAAMb,SAER,gBAAC,IAAD,CAAKe,KAAM,CAAEC,KAAM,EAAGC,OAAQ,GAAIC,MAAM,KACtCL,EAAMd,SAER,gBAAC,IAAD,CAAKgB,KAAM,CAAEC,KAAM,EAAGC,OAAQ,GAAIC,MAAM,KACpCL,EAAMZ","sources":["webpack://gatsby-starter-hello-world/./src/pages/index.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport Layout from \"../containers/layout\"\nimport Parse from \"../library/parse\"\nimport { List, Box, TextInput, Select } from 'grommet'\n\nconst sortDynamic = (key, order = 'desc') => {\n  const sortOrder = order === 'asc' ? 1 : -1\n  return (a, b) => {\n      const A = (typeof a[key] === 'string') ? a[key].toUpperCase() : a[key];\n      const B = (typeof b[key] === 'string') ? b[key].toUpperCase() : b[key];\n      if ( A < B ){\n          return sortOrder * -1\n      }else if ( A > B ) {\n          return sortOrder * 1\n      } else {\n          return 0\n      }\n  }\n}\n\nconst getDifference = (a, b) => {\n  if(a === b) {\n    return 0;\n  }\n  if(a < b) {\n    return (b - a) / a * 100\n  } else {\n    return (a - b) / b * 100\n  }\n}\n\nconst Home = () => {\n  const [exchangeData, setExchangeData] = useState([])\n  const [mergedData, setMergeData] = useState([])\n  const [selectList, setSelectList] = useState([])\n  const [selection, setSelection] = useState(\"\")\n  useEffect(() => {\n\n    const getPrice = async () => {\n\n      return await Parse.Cloud.run(\"getPrice\", {\n        symbol: '',\n        exchange: 'All',\n      })\n    }\n    getPrice()\n    .then(setExchangeData)\n  }, [])\n\n  useEffect(() => {\n    const _selectList = exchangeData.length ? exchangeData[0].data.map(e => e.symbol) : [];\n    setSelectList(_selectList)\n\n    const _mergedData = exchangeData.reduce((accum, nex) => {\n      nex.data.forEach(i => {\n        if(accum[i.symbol]) {\n          accum[i.symbol] = {\n            ...accum[i.symbol],\n            [nex.exchange]: i.price\n          }\n        } else {\n          accum[i.symbol] = {\n            [nex.exchange]: i.price\n          }\n        }\n        \n      })\n      return accum;\n    }, {})\n    const result = Object.keys(_mergedData)\n    .map(k => ({\n      symbol: k,\n      ..._mergedData[k]\n    }))\n    .filter(e => (e.binance && e.bitmart))\n    .map(e => ({\n      ...e,\n      difference: getDifference(e.binance, e.bitmart)\n    }))\n    .filter(e => e.difference !== 0 && e.symbol.includes('USDT'))\n    .sort(sortDynamic('difference'))\n    \n    setMergeData(result)\n  }, [exchangeData])\n\n  return <>\n\n      <br />\n      {\n        <List\n        data={mergedData}\n      >\n        {datum => {\n          return <Box direction=\"row\">\n            <Box flex={{ grow: 1, shrink: 1}} basis=\"0\">\n            { datum.symbol }\n            </Box>\n            <Box flex={{ grow: 1, shrink: 1}} basis=\"0\">\n            { datum.bitmart }\n            </Box>\n            <Box flex={{ grow: 1, shrink: 1}} basis=\"0\">\n            { datum.binance }\n            </Box>\n            <Box flex={{ grow: 1, shrink: 1}} basis=\"0\">\n              { datum.difference }\n            </Box>\n          </Box>\n        }}\n      </List>\n}\n  \n  </>\n}\n\nexport default Home"],"names":["useState","exchangeData","setExchangeData","mergedData","setMergeData","setSelectList","useEffect","Parse","symbol","exchange","getPrice","then","_selectList","length","data","map","e","_mergedData","reduce","accum","nex","forEach","i","price","result","Object","keys","k","filter","binance","bitmart","difference","a","b","includes","sort","key","order","sortOrder","A","toUpperCase","B","sortDynamic","datum","direction","flex","grow","shrink","basis"],"sourceRoot":""}