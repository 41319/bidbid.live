{"version":3,"sources":["webpack:///./src/components/DataGrid/index.js","webpack:///./src/components/Forms/Product.js","webpack:///./src/pages/account/manageProduct.js"],"names":["Component","data","onConfigure","onDelete","DataTable","columns","property","header","Text","primary","render","datum","Configure","onClick","style","cursor","Close","formModal","onModal","mode","onUpdate","useState","modal","setModal","React","checked","setChecked","setProductImage","textInputProps","key","modalObject","value","onChange","event","target","onDrop","useCallback","acceptedFiles","file","Parse","File","name","save","then","parseFile","url","photo","available","uploadFile","useDropzone","getRootProps","getInputProps","isDragActive","Box","Heading","level","height","width","Image","fit","src","Button","label","includes","TextInput","placeholder","direction","CheckBox","App","id","Store","Object","extend","setformModal","activeStore","editModal","setEditModal","showModal","setShowModal","store","setStore","myProducts","setMyProducts","productFormMode","setProductFormMode","useEffect","a","findMyStore","stores","find","e","run","get","findProduct","loadProduct","fill","justify","align","alignContent","gap","plain","objectId","Anchor","map","toJSON","Modal","onClose","Product","action","keyToSend","storeId","cloneJSONKey","createOneProduct","updateOneProduct","productId","deleteOneProduct","setTimeout","r"],"mappings":"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","file":"component---src-pages-account-manage-product-js-e17c37a5a3ae95023e55.js","sourcesContent":["import React from \"react\";\nimport { DataTable, Text } from \"grommet\";\nimport { Close, Configure } from \"grommet-icons\";\nconst Component = ({ data, onConfigure, onDelete }) => {\n  return (\n    <>\n      <DataTable\n        columns={[\n          {\n            property: \"name\",\n            header: <Text>Name</Text>,\n            primary: true,\n          },\n          {\n            property: \"description\",\n            header: <Text>Description</Text>,\n          },\n          {\n            property: \"startBid\",\n            header: <Text>Start Bid</Text>,\n          },\n          {\n            property: \"instantClosePrice\",\n            header: <Text>Instant Close Price</Text>,\n          },\n          {\n            property: \"Status\",\n            header: <Text>Status</Text>,\n          },\n          {\n            property: \"available\",\n            header: <Text>Display</Text>,\n          },\n          {\n            property: \"\",\n            header: <Text>Action</Text>,\n            render: (datum) => (\n              <>\n                <Configure\n                  onClick={() => onConfigure && onConfigure(datum)}\n                  style={{ cursor: \"pointer\" }}\n                />\n                <Close\n                  onClick={() => onDelete && onDelete(datum)}\n                  style={{ cursor: \"pointer\" }}\n                />\n              </>\n            ),\n          },\n        ]}\n        data={data}\n      />\n    </>\n  );\n};\n\nexport default Component;\n","import React, { useState, useCallback } from \"react\";\nimport { Box, Button, TextInput, Heading, Image, CheckBox } from \"grommet\";\nimport { useDropzone } from \"react-dropzone\";\nimport Parse from \"../../library/parse\";\nconst Component = ({\n  formModal,\n  onModal,\n  mode = \"create\",\n  onDelete,\n  onUpdate,\n}) => {\n  const [modal, setModal] = useState(formModal);\n  const [checked, setChecked] = React.useState(true);\n  const [, setProductImage] = useState(null);\n\n  const textInputProps = (key, modalObject) => ({\n    value: modalObject[key],\n    onChange: (event) =>\n      setModal({\n        ...modalObject,\n        [key]: event.target.value,\n      }),\n  });\n\n  const onDrop = useCallback(\n    (acceptedFiles) => {\n      const uploadFile = (file) => {\n        var parseFile = new Parse.File(file.name, file);\n        parseFile.save().then(function (parseFile) {\n          setProductImage(parseFile.url());\n          setModal({\n            ...modal,\n            photo: parseFile,\n            available: !!checked,\n          });\n        });\n      };\n      const file = acceptedFiles && acceptedFiles[0];\n      uploadFile(file);\n    },\n    [modal, checked]\n  );\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  return (\n    <Box>\n      {mode === \"delete\" && (\n        <>\n          <Heading level={2}>Are you sure?</Heading>\n          {modal && modal.photo && modal.photo.url && (\n            <Box height=\"small\" width=\"small\">\n              <Image fit=\"cover\" src={modal.photo.url} />\n            </Box>\n          )}\n          <Button\n            label=\"delete\"\n            onClick={() => {\n              onModal &&\n                onModal(mode, {\n                  ...modal,\n                  available: !!checked,\n                });\n            }}\n          />\n        </>\n      )}\n      {[\"create\", \"update\"].includes(mode) && (\n        <>\n          <Heading level={3}>Upload Product</Heading>\n          <TextInput\n            placeholder=\"Product Name\"\n            {...textInputProps(\"name\", modal)}\n          />\n          <Box direction=\"row\">\n            <div {...getRootProps()}>\n              <input {...getInputProps()} />\n              {modal && modal.photo && modal.photo.url && (\n                <Box height=\"small\" width=\"small\">\n                  <Image fit=\"cover\" src={modal.photo.url} />\n                </Box>\n              )}\n              {isDragActive ? (\n                <p>Drop the files here ...</p>\n              ) : (\n                <p>Drag 'n' drop some files here, or click to select files</p>\n              )}\n            </div>\n          </Box>\n          <TextInput\n            {...textInputProps(\"startBid\", modal)}\n            placeholder=\"Start Bid\"\n          />\n          <TextInput\n            {...textInputProps(\"instantClosePrice\", modal)}\n            placeholder=\"Instant Close\"\n          />\n          <CheckBox\n            checked={checked}\n            label=\"Display On Store\"\n            onChange={(event) => {\n              setChecked(event.target.checked);\n            }}\n          />\n          <Button\n            label={mode}\n            onClick={() =>\n              onModal &&\n              onModal(mode, {\n                ...modal,\n                available: !!checked,\n              })\n            }\n          />\n        </>\n      )}\n    </Box>\n  );\n};\n\nexport default Component;\n","import React, { useEffect, useState } from \"react\";\nimport { Box, TextInput, Anchor } from \"grommet\";\nimport ProductGrid from \"../../components/DataGrid\";\nimport ProductForm from \"../../components/Forms/Product\";\nimport Modal from \"../../components/Modal\";\nimport {\n  findMyStore,\n  findProduct,\n  deleteOneProduct,\n  updateOneProduct,\n  createOneProduct,\n} from \"../../library/parse\";\nimport { cloneJSONKey } from \"../../helpers\";\nimport Parse from \"../../library/parse\";\n\nconst App = ({ id }) => {\n  const Store = Parse && Parse.Object && Parse.Object.extend(\"Store\");\n  const [formModal, setformModal] = useState({});\n  const [activeStore] = useState(Store && new Store());\n  const [editModal, setEditModal] = useState({});\n  const [showModal, setShowModal] = useState(false);\n  const [store, setStore] = useState(null);\n  const [myProducts, setMyProducts] = useState([]);\n  const [productFormMode, setProductFormMode] = useState(\"create\");\n\n  useEffect(() => {\n    const run = async () => {\n      const stores = await findMyStore();\n      setStore(stores.find((e) => e.id === id));\n    };\n    run();\n  }, [id]);\n\n  useEffect(() => {\n    if (store) {\n      setEditModal({\n        name: store.get(\"name\"),\n      });\n      const loadProduct = async () => {\n        setMyProducts(await findProduct(store));\n      };\n      loadProduct();\n    }\n  }, [store]);\n  return (\n    <>\n      <Box fill={true} justify=\"center\" align=\"center\" alignContent=\"center\">\n        {\n          <>\n            <Box fill={true} gap=\"small\" direction=\"row\">\n              <TextInput\n                plain={false}\n                placeholder=\"choose a store name\"\n                value={editModal.name}\n                onChange={(event) => {\n                  setEditModal({\n                    ...editModal,\n                    objectId: activeStore && activeStore.id,\n                    name: event.target.value,\n                  });\n                }}\n              />\n              <Anchor onClick={() => setShowModal(true)}>\n                Change Store Name\n              </Anchor>\n              <Anchor\n                onClick={() => {\n                  setProductFormMode(\"create\");\n                  setformModal({});\n                  setShowModal(true);\n                }}\n              >\n                Add Product\n              </Anchor>\n            </Box>\n            <Box fill={true}>\n              <ProductGrid\n                data={myProducts ? myProducts.map((e) => e.toJSON()) : []}\n                onConfigure={(modal) => {\n                  setProductFormMode(\"update\");\n                  setformModal(modal);\n                  setShowModal(true);\n                }}\n                onDelete={(modal) => {\n                  setProductFormMode(\"delete\");\n                  setformModal(modal);\n                  setShowModal(true);\n                }}\n              />\n            </Box>\n          </>\n        }\n      </Box>\n      {showModal && (\n        <Modal onClose={() => setShowModal(false)}>\n          <ProductForm\n            mode={productFormMode}\n            formModal={formModal}\n            onModal={async (action, modal) => {\n              const keyToSend = [\n                \"name\",\n                \"photo\",\n                \"startBid\",\n                \"instantClosePrice\",\n                \"objectId\",\n                \"available\",\n              ];\n              const storeId = store.id;\n              modal = cloneJSONKey(modal, keyToSend);\n\n              if (action === \"create\") {\n                await createOneProduct(modal, store.id);\n              }\n              if (action === \"update\") {\n                await updateOneProduct({\n                  ...modal,\n                  productId: modal.objectId,\n                  storeId,\n                });\n              }\n              if (action === \"delete\") {\n                await deleteOneProduct({\n                  productId: modal.objectId,\n                  storeId,\n                });\n              }\n              setTimeout(\n                () =>\n                  findProduct(store).then((r) => {\n                    setMyProducts(r);\n                    setShowModal(false);\n                  }),\n                1000\n              );\n            }}\n            onClose={() => setShowModal(false)}\n          />\n        </Modal>\n      )}\n    </>\n  );\n};\nexport default App;\n"],"sourceRoot":""}