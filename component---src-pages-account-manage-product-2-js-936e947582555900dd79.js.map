{"version":3,"sources":["webpack:///./src/pages/account/manageProduct2.js","webpack:///./src/containers/DataGrid/index.js"],"names":["App","id","configureCol","property","headerText","primaryKey","render","data","type","ReactHtmlParser","description","bidEndAt","format","parseISO","iso","available","startBid","photo","href","url","suffix","objectClass","columns","query","q","fetchData","action","params","storeId","f","v","Home","datasource","hideCRUDForm","useState","activeModel","setActiveModel","showFormModal","setShowFormModal","mode","setMode","stores","setStores","dtColumn","setDtColumn","loadData","useCallback","a","callCloud","useEffect","newDtColumn","map","e","header","primary","push","onClick","datum","style","cursor","length","toJSON","onClose","formConfig","config","model","crud","setTimeout"],"mappings":"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","file":"component---src-pages-account-manage-product-2-js-936e947582555900dd79.js","sourcesContent":["import React from \"react\";\nimport DataGrid from \"../../containers/DataGrid\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport { Anchor } from \"grommet\";\nimport { format, parseISO } from \"date-fns\";\n\nconst App = ({ id }) => {\n  const configureCol = [\n    {\n      property: \"objectId\",\n      headerText: \"\",\n      primaryKey: true,\n      render: (data) => <> </>,\n    },\n    {\n      property: \"name\",\n      headerText: \"Name\",\n    },\n    {\n      property: \"Description\",\n      headerText: \"Info\",\n      type: \"Textarea\",\n      render: (data) => <> {ReactHtmlParser(data.description)} </>,\n    },\n    {\n      property: \"bidEndAt\",\n      headerText: \"BidEnd\",\n      type: \"DateTimePicker\",\n      render: (data) => (\n        <>\n          {\" \"}\n          {data.bidEndAt\n            ? format(parseISO(data.bidEndAt.iso), \"yyyy MMM dd HH:mm:s\")\n            : \"Not Set\"}{\" \"}\n        </>\n      ),\n    },\n    {\n      property: \"available\",\n      headerText: \"Show\",\n      type: \"CheckBox\",\n      render: (data) => <> {data.available ? \"Yes\" : \"No\"} </>,\n    },\n    {\n      property: \"startBid\",\n      headerText: \"startBid\",\n      render: (data) => <> {data.startBid} </>,\n    },\n    {\n      headerText: \"Image\",\n      render: (data) => (\n        <>\n          {\" \"}\n          {data.photo ? (\n            <Anchor href={data.photo.url}> View </Anchor>\n          ) : (\n            \"Empty\"\n          )}{\" \"}\n        </>\n      ),\n    },\n  ];\n  return (\n    <>\n      <DataGrid\n        suffix=\"ForUser\"\n        objectClass=\"Product\"\n        columns={configureCol}\n        query={(q) => q}\n        fetchData={{\n          action: \"searchProduct\",\n          params: {\n            query: {\n              storeId: {\n                f: \"equalTo\",\n                v: id,\n              },\n            },\n          },\n        }}\n      />\n    </>\n  );\n};\nexport default App;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { Close, Configure } from \"grommet-icons\";\nimport Modal from \"../../components/Modal\";\nimport { Box, Anchor, DataTable, Text } from \"grommet\";\nimport { callCloud, crud } from \"../../library/parse\";\nimport CRUDForm from '../CRUDForm'\n\nconst Home = ({ datasource, hideCRUDForm, suffix = \"\", objectClass, columns, fetchData }) => {\n  \n  const [activeModel, setActiveModel] = useState({});\n  const [showFormModal, setShowFormModal] = useState(false);\n  const [mode, setMode] = useState(\"read\");\n  const [stores, setStores] = useState(datasource || []);\n  const [dtColumn, setDtColumn] = useState([]);\n  const loadData = useCallback(async () => {\n    return (\n      fetchData &&\n      setStores(await callCloud(fetchData.action, fetchData.params))\n    );\n  }, [fetchData]);\n\n  useEffect(() => {\n    if(datasource) {\n      setStores(datasource)\n    } else {\n      loadData()\n    }\n  }, [loadData, datasource]);\n\n  useEffect(() => {\n    const newDtColumn = columns.map((e) => ({\n      property: e.property,\n      header: <Text> {e.headerText}</Text>,\n      primary: e.primary,\n      render: e.render,\n    }));\n\n    !hideCRUDForm && newDtColumn.push(\n      {\n        property: \"objectId\",\n        header: (\n          <Anchor\n            onClick={() => {\n              setActiveModel({});\n              setMode(\"create\");\n              setShowFormModal(true);\n            }}\n          >\n            Add {objectClass}\n          </Anchor>\n        ),\n        render: (datum) => (\n          <>\n            <Configure\n              onClick={() => {\n                setActiveModel(datum);\n                setMode(\"update\");\n                setShowFormModal(true);\n              }}\n              style={{ cursor: \"pointer\" }}\n            />\n            <Close\n              onClick={() => {\n                setActiveModel(datum);\n                setMode(\"delete\");\n                setShowFormModal(true);\n              }}\n              style={{ cursor: \"pointer\" }}\n            />\n          </>\n        ),\n      }\n    )\n    setDtColumn(newDtColumn)\n  }, [hideCRUDForm, columns])\n\n  return (\n    <Box>\n      {stores.length} {objectClass}\n      <DataTable\n        columns={dtColumn}\n        data={stores.map((e) => e.toJSON())}\n      />\n      {showFormModal && (\n        <Modal onClose={() => setShowFormModal(false)}>\n          <CRUDForm \n            formConfig={{ config: columns }}\n            mode={mode}\n            model={activeModel}\n            onClick={(mode, model) => {\n              crud(objectClass, model, mode, suffix);\n              setTimeout(() => {\n                loadData();\n                setShowFormModal(false);\n              }, 1000);\n            }}\n            />\n        </Modal>\n      )}\n    </Box>\n  );\n};\n\nexport default Home;\n"],"sourceRoot":""}