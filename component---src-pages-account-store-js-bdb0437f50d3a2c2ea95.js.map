{"version":3,"sources":["webpack:///./src/pages/account/manageProduct2.js","webpack:///./node_modules/grommet-icons/es6/icons/Cluster.js","webpack:///./src/pages/account/mystore.js","webpack:///./src/containers/DataGrid/index.js","webpack:///./src/components/DataGrid/index.js","webpack:///./src/components/Forms/Product.js","webpack:///./src/pages/account/manageProduct.js","webpack:///./src/pages/account/store.js","webpack:///./src/pages/account/editstore.js"],"names":["App","id","configureCol","property","headerText","primaryKey","render","data","type","ReactHtmlParser","description","bidEndAt","format","parseISO","iso","available","startBid","photo","href","url","suffix","objectClass","columns","query","q","fetchData","action","params","storeId","f","v","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","props","createElement","StyledIcon","viewBox","a11yTitle","fill","stroke","strokeWidth","d","DataGrid","width","user","t","c","Parse","User","current","Home","datasource","hideCRUDForm","useState","activeModel","setActiveModel","showFormModal","setShowFormModal","mode","setMode","stores","setStores","dtColumn","setDtColumn","loadData","useCallback","a","callCloud","useEffect","newDtColumn","map","e","header","primary","push","onClick","datum","style","cursor","toJSON","onClose","formConfig","config","model","crud","setTimeout","Component","onConfigure","onDelete","DataTable","Text","Configure","Close","formModal","onModal","onUpdate","modal","setModal","React","checked","setChecked","setProductImage","textInputProps","modalObject","value","onChange","event","onDrop","acceptedFiles","file","File","name","save","then","parseFile","uploadFile","useDropzone","getRootProps","getInputProps","isDragActive","Box","Heading","level","height","Image","fit","src","Button","label","includes","TextInput","placeholder","direction","CheckBox","Store","extend","setformModal","activeStore","editModal","setEditModal","showModal","setShowModal","store","setStore","myProducts","setMyProducts","productFormMode","setProductFormMode","findMyStore","find","run","get","findProduct","loadProduct","justify","align","alignContent","gap","plain","objectId","Anchor","Modal","Product","keyToSend","cloneJSONKey","createOneProduct","updateOneProduct","productId","deleteOneProduct","r","basepath","path"],"mappings":"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","file":"component---src-pages-account-store-js-bdb0437f50d3a2c2ea95.js","sourcesContent":["import React from \"react\";\nimport DataGrid from \"../../containers/DataGrid\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport { Anchor } from \"grommet\";\nimport { format, parseISO } from \"date-fns\";\n\nconst App = ({ id }) => {\n  const configureCol = [\n    {\n      property: \"objectId\",\n      headerText: \"\",\n      primaryKey: true,\n      render: (data) => <> </>,\n    },\n    {\n      property: \"name\",\n      headerText: \"Name\",\n    },\n    {\n      property: \"Description\",\n      headerText: \"Info\",\n      type: \"Textarea\",\n      render: (data) => <> {ReactHtmlParser(data.description)} </>,\n    },\n    {\n      property: \"bidEndAt\",\n      headerText: \"BidEnd\",\n      type: \"DateTimePicker\",\n      render: (data) => (\n        <>\n          {\" \"}\n          {data.bidEndAt\n            ? format(parseISO(data.bidEndAt.iso), \"yyyy MMM dd HH:mm:s\")\n            : \"Not Set\"}{\" \"}\n        </>\n      ),\n    },\n    {\n      property: \"available\",\n      headerText: \"Show\",\n      type: \"CheckBox\",\n      render: (data) => <> {data.available ? \"Yes\" : \"No\"} </>,\n    },\n    {\n      property: \"startBid\",\n      headerText: \"startBid\",\n      render: (data) => <> {data.startBid} </>,\n    },\n    {\n      headerText: \"Image\",\n      render: (data) => (\n        <>\n          {\" \"}\n          {data.photo ? (\n            <Anchor href={data.photo.url}> View </Anchor>\n          ) : (\n            \"Empty\"\n          )}{\" \"}\n        </>\n      ),\n    },\n  ];\n  return (\n    <>\n      <DataGrid\n        suffix=\"ForUser\"\n        objectClass=\"Product\"\n        columns={configureCol}\n        query={(q) => q}\n        fetchData={{\n          action: \"searchProduct\",\n          params: {\n            query: {\n              storeId: {\n                f: \"equalTo\",\n                v: id,\n              },\n            },\n          },\n        }}\n      />\n    </>\n  );\n};\nexport default App;\n","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { StyledIcon } from '../StyledIcon';\nexport var Cluster = function Cluster(props) {\n  return /*#__PURE__*/React.createElement(StyledIcon, _extends({\n    viewBox: \"0 0 24 24\",\n    a11yTitle: \"Cluster\"\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"none\",\n    stroke: \"#000\",\n    strokeWidth: \"2\",\n    d: \"M8,9 L16,9 L16,1 L8,1 L8,9 Z M1,23 L9,23 L9,15 L1,15 L1,23 Z M15,23 L23,23 L23,15 L15,15 L15,23 Z M5,15 L8,9 L5,15 Z M10,19 L14,19 L10,19 Z M16,9 L19,15 L16,9 Z\"\n  }));\n};","import React from \"react\";\nimport DataGrid from \"../../containers/DataGrid\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport { Cluster } from \"grommet-icons\";\nimport Parse from \"../../library/parse\";\nconst App = () => {\n  const configureCol = [\n    {\n      property: \"name\",\n      headerText: \"Name\",\n    },\n    {\n      property: \"description\",\n      headerText: \"Info\",\n      type: \"Textarea\",\n      render: (data) => <> {ReactHtmlParser(data.description)} </>,\n    },\n    {\n      property: \"objectId\",\n      headerText: \"Product\",\n      primaryKey: true,\n      render: (data) => (\n        <>\n          <Cluster />\n        </>\n      ),\n    },\n  ];\n  return (\n    <>\n      <DataGrid\n        width=\"100%\"\n        objectClass=\"Store\"\n        columns={configureCol}\n        query={(q) => q}\n        fetchData={{\n          action: \"searchStore\",\n          params: {\n            query: {\n              user: {\n                f: \"equalTo\",\n                t: \"pointer\",\n                c: \"User\",\n                v: Parse && Parse.User && Parse.User.current().id,\n              },\n            },\n          },\n        }}\n      />\n    </>\n  );\n};\nexport default App;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { Close, Configure } from \"grommet-icons\";\nimport Modal from \"../../components/Modal\";\nimport { Box, Anchor, DataTable, Text } from \"grommet\";\nimport { callCloud, crud } from \"../../library/parse\";\nimport CRUDForm from '../CRUDForm'\n\nconst Home = ({ datasource, hideCRUDForm, suffix = \"\", objectClass, columns, fetchData }) => {\n  \n  const [activeModel, setActiveModel] = useState({});\n  const [showFormModal, setShowFormModal] = useState(false);\n  const [mode, setMode] = useState(\"read\");\n  const [stores, setStores] = useState(datasource || []);\n  const [dtColumn, setDtColumn] = useState([]);\n  const loadData = useCallback(async () => {\n    return (\n      fetchData &&\n      setStores(await callCloud(fetchData.action, fetchData.params))\n    );\n  }, [fetchData]);\n\n  useEffect(() => {\n    if(datasource) {\n      setStores(datasource)\n    } else {\n      loadData()\n    }\n  }, [loadData, datasource]);\n\n  useEffect(() => {\n    const newDtColumn = columns.map((e) => ({\n      property: e.property,\n      header: <Text> {e.headerText}</Text>,\n      primary: e.primary,\n      render: e.render,\n    }));\n\n    !hideCRUDForm && newDtColumn.push(\n      {\n        property: \"objectId\",\n        header: (\n          <Anchor\n            onClick={() => {\n              setActiveModel({});\n              setMode(\"create\");\n              setShowFormModal(true);\n            }}\n          >\n            Add {objectClass}\n          </Anchor>\n        ),\n        render: (datum) => (\n          <>\n            <Configure\n              onClick={() => {\n                setActiveModel(datum);\n                setMode(\"update\");\n                setShowFormModal(true);\n              }}\n              style={{ cursor: \"pointer\" }}\n            />\n            <Close\n              onClick={() => {\n                setActiveModel(datum);\n                setMode(\"delete\");\n                setShowFormModal(true);\n              }}\n              style={{ cursor: \"pointer\" }}\n            />\n          </>\n        ),\n      }\n    )\n    setDtColumn(newDtColumn)\n  }, [hideCRUDForm, columns])\n\n  return (\n    <Box>\n      {stores.length} {objectClass}\n      <DataTable\n        columns={dtColumn}\n        data={stores.map((e) => e.toJSON())}\n      />\n      {showFormModal && (\n        <Modal onClose={() => setShowFormModal(false)}>\n          <CRUDForm \n            formConfig={{ config: columns }}\n            mode={mode}\n            model={activeModel}\n            onClick={(mode, model) => {\n              crud(objectClass, model, mode, suffix);\n              setTimeout(() => {\n                loadData();\n                setShowFormModal(false);\n              }, 1000);\n            }}\n            />\n        </Modal>\n      )}\n    </Box>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { DataTable, Text } from \"grommet\";\nimport { Close, Configure } from \"grommet-icons\";\nconst Component = ({ data, onConfigure, onDelete }) => {\n  return (\n    <>\n      <DataTable\n        columns={[\n          {\n            property: \"name\",\n            header: <Text>Name</Text>,\n            primary: true,\n          },\n          {\n            property: \"description\",\n            header: <Text>Description</Text>,\n          },\n          {\n            property: \"startBid\",\n            header: <Text>Start Bid</Text>,\n          },\n          {\n            property: \"instantClosePrice\",\n            header: <Text>Instant Close Price</Text>,\n          },\n          {\n            property: \"Status\",\n            header: <Text>Status</Text>,\n          },\n          {\n            property: \"available\",\n            header: <Text>Display</Text>,\n          },\n          {\n            property: \"\",\n            header: <Text>Action</Text>,\n            render: (datum) => (\n              <>\n                <Configure\n                  onClick={() => onConfigure && onConfigure(datum)}\n                  style={{ cursor: \"pointer\" }}\n                />\n                <Close\n                  onClick={() => onDelete && onDelete(datum)}\n                  style={{ cursor: \"pointer\" }}\n                />\n              </>\n            ),\n          },\n        ]}\n        data={data}\n      />\n    </>\n  );\n};\n\nexport default Component;\n","import React, { useState, useCallback } from \"react\";\nimport { Box, Button, TextInput, Heading, Image, CheckBox } from \"grommet\";\nimport { useDropzone } from \"react-dropzone\";\nimport Parse from \"../../library/parse\";\nconst Component = ({\n  formModal,\n  onModal,\n  mode = \"create\",\n  onDelete,\n  onUpdate,\n}) => {\n  const [modal, setModal] = useState(formModal);\n  const [checked, setChecked] = React.useState(true);\n  const [, setProductImage] = useState(null);\n\n  const textInputProps = (key, modalObject) => ({\n    value: modalObject[key],\n    onChange: (event) =>\n      setModal({\n        ...modalObject,\n        [key]: event.target.value,\n      }),\n  });\n\n  const onDrop = useCallback(\n    (acceptedFiles) => {\n      const uploadFile = (file) => {\n        var parseFile = new Parse.File(file.name, file);\n        parseFile.save().then(function (parseFile) {\n          setProductImage(parseFile.url());\n          setModal({\n            ...modal,\n            photo: parseFile,\n            available: !!checked,\n          });\n        });\n      };\n      const file = acceptedFiles && acceptedFiles[0];\n      uploadFile(file);\n    },\n    [modal, checked]\n  );\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  return (\n    <Box>\n      {mode === \"delete\" && (\n        <>\n          <Heading level={2}>Are you sure?</Heading>\n          {modal && modal.photo && modal.photo.url && (\n            <Box height=\"small\" width=\"small\">\n              <Image fit=\"cover\" src={modal.photo.url} />\n            </Box>\n          )}\n          <Button\n            label=\"delete\"\n            onClick={() => {\n              onModal &&\n                onModal(mode, {\n                  ...modal,\n                  available: !!checked,\n                });\n            }}\n          />\n        </>\n      )}\n      {[\"create\", \"update\"].includes(mode) && (\n        <>\n          <Heading level={3}>Upload Product</Heading>\n          <TextInput\n            placeholder=\"Product Name\"\n            {...textInputProps(\"name\", modal)}\n          />\n          <Box direction=\"row\">\n            <div {...getRootProps()}>\n              <input {...getInputProps()} />\n              {modal && modal.photo && modal.photo.url && (\n                <Box height=\"small\" width=\"small\">\n                  <Image fit=\"cover\" src={modal.photo.url} />\n                </Box>\n              )}\n              {isDragActive ? (\n                <p>Drop the files here ...</p>\n              ) : (\n                <p>Drag 'n' drop some files here, or click to select files</p>\n              )}\n            </div>\n          </Box>\n          <TextInput\n            {...textInputProps(\"startBid\", modal)}\n            placeholder=\"Start Bid\"\n          />\n          <TextInput\n            {...textInputProps(\"instantClosePrice\", modal)}\n            placeholder=\"Instant Close\"\n          />\n          <CheckBox\n            checked={checked}\n            label=\"Display On Store\"\n            onChange={(event) => {\n              setChecked(event.target.checked);\n            }}\n          />\n          <Button\n            label={mode}\n            onClick={() =>\n              onModal &&\n              onModal(mode, {\n                ...modal,\n                available: !!checked,\n              })\n            }\n          />\n        </>\n      )}\n    </Box>\n  );\n};\n\nexport default Component;\n","import React, { useEffect, useState } from \"react\";\nimport { Box, TextInput, Anchor } from \"grommet\";\nimport ProductGrid from \"../../components/DataGrid\";\nimport ProductForm from \"../../components/Forms/Product\";\nimport Modal from \"../../components/Modal\";\nimport {\n  findMyStore,\n  findProduct,\n  deleteOneProduct,\n  updateOneProduct,\n  createOneProduct,\n} from \"../../library/parse\";\nimport { cloneJSONKey } from \"../../helpers\";\nimport Parse from \"../../library/parse\";\n\nconst App = ({ id }) => {\n  const Store = Parse && Parse.Object && Parse.Object.extend(\"Store\");\n  const [formModal, setformModal] = useState({});\n  const [activeStore] = useState(Store && new Store());\n  const [editModal, setEditModal] = useState({});\n  const [showModal, setShowModal] = useState(false);\n  const [store, setStore] = useState(null);\n  const [myProducts, setMyProducts] = useState([]);\n  const [productFormMode, setProductFormMode] = useState(\"create\");\n\n  useEffect(() => {\n    const run = async () => {\n      const stores = await findMyStore();\n      setStore(stores.find((e) => e.id === id));\n    };\n    run();\n  }, [id]);\n\n  useEffect(() => {\n    if (store) {\n      setEditModal({\n        name: store.get(\"name\"),\n      });\n      const loadProduct = async () => {\n        setMyProducts(await findProduct(store));\n      };\n      loadProduct();\n    }\n  }, [store]);\n  return (\n    <>\n      <Box fill={true} justify=\"center\" align=\"center\" alignContent=\"center\">\n        {\n          <>\n            <Box fill={true} gap=\"small\" direction=\"row\">\n              <TextInput\n                plain={false}\n                placeholder=\"choose a store name\"\n                value={editModal.name}\n                onChange={(event) => {\n                  setEditModal({\n                    ...editModal,\n                    objectId: activeStore && activeStore.id,\n                    name: event.target.value,\n                  });\n                }}\n              />\n              <Anchor onClick={() => setShowModal(true)}>\n                Change Store Name\n              </Anchor>\n              <Anchor\n                onClick={() => {\n                  setProductFormMode(\"create\");\n                  setformModal({});\n                  setShowModal(true);\n                }}\n              >\n                Add Product\n              </Anchor>\n            </Box>\n            <Box fill={true}>\n              <ProductGrid\n                data={myProducts ? myProducts.map((e) => e.toJSON()) : []}\n                onConfigure={(modal) => {\n                  setProductFormMode(\"update\");\n                  setformModal(modal);\n                  setShowModal(true);\n                }}\n                onDelete={(modal) => {\n                  setProductFormMode(\"delete\");\n                  setformModal(modal);\n                  setShowModal(true);\n                }}\n              />\n            </Box>\n          </>\n        }\n      </Box>\n      {showModal && (\n        <Modal onClose={() => setShowModal(false)}>\n          <ProductForm\n            mode={productFormMode}\n            formModal={formModal}\n            onModal={async (action, modal) => {\n              const keyToSend = [\n                \"name\",\n                \"photo\",\n                \"startBid\",\n                \"instantClosePrice\",\n                \"objectId\",\n                \"available\",\n              ];\n              const storeId = store.id;\n              modal = cloneJSONKey(modal, keyToSend);\n\n              if (action === \"create\") {\n                await createOneProduct(modal, store.id);\n              }\n              if (action === \"update\") {\n                await updateOneProduct({\n                  ...modal,\n                  productId: modal.objectId,\n                  storeId,\n                });\n              }\n              if (action === \"delete\") {\n                await deleteOneProduct({\n                  productId: modal.objectId,\n                  storeId,\n                });\n              }\n              setTimeout(\n                () =>\n                  findProduct(store).then((r) => {\n                    setMyProducts(r);\n                    setShowModal(false);\n                  }),\n                1000\n              );\n            }}\n            onClose={() => setShowModal(false)}\n          />\n        </Modal>\n      )}\n    </>\n  );\n};\nexport default App;\n","import React from \"react\";\nimport { Router } from \"@reach/router\";\nimport MyStore from \"./mystore\";\nimport EditStore from \"./editstore\";\nimport ManageStoreProduct from \"./manageProduct\";\nimport ManageStoreProduct2 from \"./manageProduct2\";\nimport { Box } from \"grommet\";\n\nconst App = () => {\n  return (\n    <Box fill={true}>\n      <Router basepath=\"/account/store\">\n        <EditStore path=\"/editstore/:id\" />\n        <MyStore path=\"/\" />\n        <ManageStoreProduct path=\"/manageproduct/:id\" />\n        <ManageStoreProduct2 path=\"/manageproduct2/:id\" />\n      </Router>\n    </Box>\n  );\n};\nexport default App;\n","import React from \"react\";\nimport DataGrid from \"../../containers/DataGrid\";\nimport ReactHtmlParser from \"react-html-parser\";\n\nconst App = () => {\n  const configureCol = [\n    {\n      property: \"name\",\n      headerText: \"Name\",\n    },\n    {\n      property: \"description\",\n      headerText: \"Description\",\n      type: \"Textarea\",\n      render: (data) => <> {ReactHtmlParser(data.description)} </>,\n    },\n  ];\n  return (\n    <>\n      <DataGrid\n        objectClass=\"Store\"\n        columns={configureCol}\n        query={(q) => q}\n        fetchData={{\n          action: \"findStore\",\n        }}\n      />\n    </>\n  );\n};\nexport default App;\n"],"sourceRoot":""}