{"version":3,"sources":["webpack:///./node_modules/grommet-icons/es6/icons/Cluster.js","webpack:///./src/pages/account/mystore.js","webpack:///./src/containers/DataGrid/index.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","props","createElement","StyledIcon","viewBox","a11yTitle","fill","stroke","strokeWidth","d","App","configureCol","property","headerText","type","render","data","ReactHtmlParser","description","primaryKey","onClick","navigate","objectId","DataGrid","width","objectClass","columns","query","q","fetchData","action","params","user","f","t","c","v","Parse","User","current","id","Home","datasource","hideCRUDForm","suffix","useState","activeModel","setActiveModel","showFormModal","setShowFormModal","mode","setMode","stores","setStores","dtColumn","setDtColumn","loadData","useCallback","a","callCloud","useEffect","newDtColumn","map","e","header","primary","push","datum","style","cursor","toJSON","onClose","formConfig","config","model","crud","setTimeout"],"mappings":"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","file":"component---src-pages-account-mystore-js-f1898e23a0bc92732223.js","sourcesContent":["function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { StyledIcon } from '../StyledIcon';\nexport var Cluster = function Cluster(props) {\n  return /*#__PURE__*/React.createElement(StyledIcon, _extends({\n    viewBox: \"0 0 24 24\",\n    a11yTitle: \"Cluster\"\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"none\",\n    stroke: \"#000\",\n    strokeWidth: \"2\",\n    d: \"M8,9 L16,9 L16,1 L8,1 L8,9 Z M1,23 L9,23 L9,15 L1,15 L1,23 Z M15,23 L23,23 L23,15 L15,15 L15,23 Z M5,15 L8,9 L5,15 Z M10,19 L14,19 L10,19 Z M16,9 L19,15 L16,9 Z\"\n  }));\n};","import React from \"react\";\nimport DataGrid from \"../../containers/DataGrid\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport { Cluster } from \"grommet-icons\";\nimport Parse from \"../../library/parse\";\nimport { navigate } from 'gatsby'\n\nconst App = () => {\n  const configureCol = [\n    {\n      property: \"name\",\n      headerText: \"Name\",\n    },\n    {\n      property: \"description\",\n      headerText: \"Info\",\n      type: \"Textarea\",\n      render: (data) => <> {ReactHtmlParser(data.description)} </>,\n    },\n    {\n      property: \"objectId\",\n      headerText: \"Product\",\n      primaryKey: true,\n      render: (data) => (\n        <>\n          <Cluster onClick={() => { navigate(`/account/store/manageproduct2/${data.objectId}`)}} />\n        </>\n      ),\n    },\n  ];\n  return (\n    <>\n      <DataGrid\n        width=\"100%\"\n        objectClass=\"Store\"\n        columns={configureCol}\n        query={(q) => q}\n        fetchData={{\n          action: \"searchStore\",\n          params: {\n            query: {\n              user: {\n                f: \"equalTo\",\n                t: \"pointer\",\n                c: \"User\",\n                v: Parse && Parse.User && Parse.User.current().id,\n              },\n            },\n          },\n        }}\n      />\n    </>\n  );\n};\nexport default App;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { Close, Configure } from \"grommet-icons\";\nimport Modal from \"../../components/Modal\";\nimport { Box, Anchor, DataTable, Text } from \"grommet\";\nimport { callCloud, crud } from \"../../library/parse\";\nimport CRUDForm from '../CRUDForm'\n\nconst Home = ({ datasource, hideCRUDForm, suffix = \"\", objectClass, columns, fetchData }) => {\n  \n  const [activeModel, setActiveModel] = useState({});\n  const [showFormModal, setShowFormModal] = useState(false);\n  const [mode, setMode] = useState(\"read\");\n  const [stores, setStores] = useState(datasource || []);\n  const [dtColumn, setDtColumn] = useState([]);\n  const loadData = useCallback(async () => {\n    return (\n      fetchData &&\n      setStores(await callCloud(fetchData.action, fetchData.params))\n    );\n  }, [fetchData]);\n\n  useEffect(() => {\n    if(datasource) {\n      setStores(datasource)\n    } else {\n      loadData()\n    }\n  }, [loadData, datasource]);\n\n  useEffect(() => {\n    const newDtColumn = columns.map((e) => ({\n      property: e.property,\n      header: <Text> {e.headerText}</Text>,\n      primary: e.primary,\n      render: e.render,\n    }));\n\n    !hideCRUDForm && newDtColumn.push(\n      {\n        property: \"objectId\",\n        header: (\n          <Anchor\n            onClick={() => {\n              setActiveModel({});\n              setMode(\"create\");\n              setShowFormModal(true);\n            }}\n          >\n            Add {objectClass}\n          </Anchor>\n        ),\n        render: (datum) => (\n          <>\n            <Configure\n              onClick={() => {\n                setActiveModel(datum);\n                setMode(\"update\");\n                setShowFormModal(true);\n              }}\n              style={{ cursor: \"pointer\" }}\n            />\n            <Close\n              onClick={() => {\n                setActiveModel(datum);\n                setMode(\"delete\");\n                setShowFormModal(true);\n              }}\n              style={{ cursor: \"pointer\" }}\n            />\n          </>\n        ),\n      }\n    )\n    setDtColumn(newDtColumn)\n  }, [hideCRUDForm, columns])\n\n  return (\n    <Box>\n      {stores.length} {objectClass}\n      <DataTable\n        columns={dtColumn}\n        data={stores.map((e) => e.toJSON())}\n      />\n      {showFormModal && (\n        <Modal onClose={() => setShowFormModal(false)}>\n          <CRUDForm \n            formConfig={{ config: columns }}\n            mode={mode}\n            model={activeModel}\n            onClick={(mode, model) => {\n              crud(objectClass, model, mode, suffix);\n              setTimeout(() => {\n                loadData();\n                setShowFormModal(false);\n              }, 1000);\n            }}\n            />\n        </Modal>\n      )}\n    </Box>\n  );\n};\n\nexport default Home;\n"],"sourceRoot":""}